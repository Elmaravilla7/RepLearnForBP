import gensimimport nltkfrom nltk.cluster import KMeansClustererfrom sklearn.cluster import AgglomerativeClusteringimport loadXESdef learn(logName,vectorsize,clusterType):    cluster(logName,vectorsize, 'G2VVST', 'G2VVS',clusterType)    cluster(logName,vectorsize, 'N2VVST', 'N2VVS',clusterType)def cluster(logName,vectorsize,path1,path2,clusterType):    if(path1=='G2VVST' and path2=='G2VVS'):        clusterT(logName,vectorsize,path1,clusterType)        clusterV(logName,vectorsize,path2,clusterType)    if(path1=='N2VVST' and path2=='N2VVS'):        clusterT(logName,vectorsize,path1,clusterType)        clusterV(logName,vectorsize,path2,clusterType)def clusterV(logName,vectorsize,nameM,clusterType):    corpus = loadXES.get_doc_XES_tagged(logName+'.xes')    vectors = []    NUM_CLUSTERS = 5    conta=[]    if(nameM=='G2VVS'):        model= gensim.models.Doc2Vec.load('output/'+nameM+str(vectorsize)+'.model')        print("inferring vectors")        for variant in range(len(corpus)):            if (corpus[variant].words not in conta):                inferred_vector = model.infer_vector(corpus[variant].words)                vectors.append(inferred_vector)                conta.append(corpus[variant].words)    elif(nameM=='N2VVS'):        model=gensim.models.KeyedVectors.load('output/'+nameM+str(vectorsize)+'.model')        print("model vectors")        for variant in loadXES.get_variant_names(logName+".xes"):            if(model.wv.__contains__(variant) and variant not in conta):                model_vector=model.wv.get_vector(variant)                vectors.append(model_vector)                conta.append(variant)    print("done")    if(clusterType=="KMeans"):        kclusterer = KMeansClusterer(NUM_CLUSTERS, distance=nltk.cluster.util.cosine_distance, repeats=25)        assigned_clusters = kclusterer.cluster(vectors, assign_clusters=True)    elif(clusterType=="HierWard"):        ward = AgglomerativeClustering(n_clusters=NUM_CLUSTERS, linkage='ward').fit(vectors)        assigned_clusters = ward.labels_    else:        print(clusterType, " is not a predefined cluster type. Please use 'KMeans' or 'HierWard', or create a definition for ", clusterType)        return    clusterResult= {}    if(nameM=='G2VVS'):        variant_list = loadXES.get_variant_names(logName + ".xes")        fatte=[]        for variant in range(len(conta)):            if(variant_list[variant] not in fatte):                clusterResult[variant_list[variant]]=assigned_clusters[variant]                fatte.append(variant_list[variant])        resultFile= open('output/'+nameM+str(vectorsize)+clusterType+'.csv','w')        fatte=[]        for variant in range(len(conta)):            if(variant_list[variant] not in fatte):                resultFile.write(variant_list[variant]+','+str(assigned_clusters[variant])+"\n")                fatte.append(variant_list[variant])        resultFile.close()    elif(nameM=='N2VVS'):        for variant in range(0, len(conta)):            clusterResult[conta[variant]] = assigned_clusters[variant]        resultFile = open('output/'+nameM+str(vectorsize)+clusterType +'.csv', 'w')        for variant in range(0, len(conta)):            resultFile.write(conta[variant] + ',' + str(assigned_clusters[variant]) + "\n")        resultFile.close()    print("done")def clusterT(logName,vectorsize,nameM,clusterType):    corpus = loadXES.get_doc_XES_tagged(logName+'.xes')    vectors = []    NUM_CLUSTERS = 5    conta=[]    if(nameM=='G2VVST'):        model= gensim.models.Doc2Vec.load('output/'+nameM+str(vectorsize)+'.model')        print("inferring vectors")        for trace in range(len(corpus)):            inferred_vector = model.infer_vector(pulisci(corpus[trace].words))            vectors.append(inferred_vector)    elif(nameM=='N2VVST'):        model=gensim.models.KeyedVectors.load('output/'+nameM+str(vectorsize)+'.model')        print("model vectors")        for trace in loadXES.get_trace_names(logName + ".xes"):            if (model.wv.__contains__(trace) and trace not in conta):                model_vector = model.wv.get_vector(trace)                vectors.append(model_vector)                conta.append(trace)    print("done")    if(clusterType=="KMeans"):        kclusterer = KMeansClusterer(NUM_CLUSTERS, distance=nltk.cluster.util.cosine_distance, repeats=25)        assigned_clusters = kclusterer.cluster(vectors, assign_clusters=True)    elif(clusterType=="HierWard"):        ward = AgglomerativeClustering(n_clusters=NUM_CLUSTERS, linkage='ward').fit(vectors)        assigned_clusters = ward.labels_    else:        print(clusterType, " is not a predefined cluster type. Please use 'KMeans' or 'HierWard', or create a definition for ", clusterType)        return    clusterResult= {}    if(nameM=='G2VVST'):        trace_list = loadXES.get_trace_names(logName + ".xes")        for trace in range(len(corpus)):            clusterResult[trace_list[trace]]=assigned_clusters[trace]        resultFile= open('output/'+nameM+str(vectorsize)+clusterType+'.csv','w')        for trace in range(len(corpus)):            resultFile.write(trace_list[trace]+','+str(assigned_clusters[trace])+"\n")        resultFile.close()    elif(nameM=='N2VVST'):        for trace in range(0, len(conta)):            clusterResult[conta[trace]] = assigned_clusters[trace]        resultFile = open('output/' + nameM + str(vectorsize) + clusterType + '.csv', 'w')        for trace in range(0, len(conta)):            resultFile.write(conta[trace] + ',' + str(assigned_clusters[trace]) + "\n")        resultFile.close()    print("done")def pulisci(element):    attivita=[]    for x in element:        if(x!='ArtificialStartTask' and x!='ArtificialEndTask' and x not in attivita):            attivita.append(x)    return attivitaif __name__ == '__main__':    logName = 'BPIC15GroundTruth'    '''    learn(logName,16,"KMeans")    learn(logName, 32, "KMeans")    learn(logName, 64, "KMeans")    learn(logName, 128, "KMeans")    '''    learn(logName, 16, "HierWard")    '''    learn(logName, 32, "HierWard")    learn(logName, 64, "HierWard")    learn(logName, 128, "HierWard")    '''